#!/usr/bin/env python
"""This program is used to monitor DDN Controllers.
Author: Coady I Kerner
Email: coady.kerner@gmail.com
"""

from __future__ import print_function
from ddn.sfa.api import *
import logging


program_defaults = { 'controller': '14k01-1',
                     'user': 'user',
                     'password': 'user',  
                   }

def parse_options():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--user",
                        dest="username",
                        default=program_defaults['user'],
                        action='store',
                        help="Username for the account. Default: %(default)s")

    parser.add_argument("-p", "--password",
                        dest="password",
                        default=program_defaults['password'],
                        action='store',
                        help="Password for the account. Default: %(default)s")
   
    parser.add_argument("-c", "--controller",
                        dest="controller",
                        default=program_defaults['controller'],
                        action='store',
                        help="DDN controller. Default: %(default)s")

    parser.add_argument("--disks",
                        dest="disks",
                        default=False,
                        action='store_true',
                        help="Check disk status. Default: %(default)s")
  
    parser.add_argument("--power",
                        dest="power",
                        default=False,
                        action='store_true',
                        help="Check enclosure power supplies. Default: %(default)s")
 
    parser.add_argument("--temp",
                        dest="temp",
                        default=False,
                        action='store_true',
                        help="Check enclosure temperature. Default: %(default)s")

    parser.add_argument("--all",
                        dest="all",
                        default=False,
                        action='store_true',
                        help="Run all checks. Default: %(default)s")

    parser.add_argument("-v", "--verbose",
                        dest="verbose",
                        default=False,
                        action='store_true',
                        help="Run in verbose mode. Default: %(default)s")

    parser.add_argument("-D", "--debug",
                        dest="debug",
                        default=False,
                        action='store_true',
                        help="Print Debugging Information. Default: %(default)s")

    args = parser.parse_args()
    return args

def check_disks():
    """Checks disk health status.
    
    Args:
        None

    Returns:
        Nothing

    Raises:
        Nothing
    
    """
    idx = 0
    while True:
        try:
            enclosure = SFAEnclosure.get(Index=idx)
            if enclosure.Type == 2:
                if args.verbose:
                    print(idx,'controller',enclosure.SerialNumber)
            elif enclosure.Type == 1:
                disks = enclosure.getDiskDrives()
                try:
                   len(disks)
                except:
                   if args.verbose:
                      print(idx,'No disks')
                else:
                   if len(disks) >= 0:
                      for dindx in range (len(disks)):
                          if args.verbose:
                             print(idx, dindx, disks[dindx].DiskHealthState.str())
                          else:
                             if disks[dindx].DiskHealthState != 0:
                                print(idx, dindx, disks[dindx].DiskHealthState.str())
        except:
            break

        idx = idx + 1

def check_power_supplies():
    """Checks power supply health status.

    Args:
        None

    Returns:
	Nothing

    Raises:
	Nothing

    """
    idx = 0
    while True:
        try:
            enclosure = SFAEnclosure.get(Index=idx)
            ps = enclosure.getPowerSupplies()
            try:
                len(ps)
            except:
                if args.verbose:
                   print(idx,'No power supplies')
            else:
                if len(ps) >= 0:
                   for dindx in range (len(ps)):
                       if args.verbose:
                          print(idx, dindx, ps[dindx].HealthState.str())
                       else:
                          if ps[dindx].HealthState != 1:
                             print(idx, dindx, ps[dindx].HealthState.str())
        except:
            break

        idx = idx + 1

def check_temperature():
    """Checks temperature health status.

    Args:
        None

    Returns:
	Nothing

    Raises:
	Nothing

    """
    idx = 0
    while True:
        try:
            enclosure = SFAEnclosure.get(Index=idx)
            t = enclosure.getTemperatureSensors()
            try:
                len(t)
            except:
                if args.verbose:
                   print(idx,'No temperature sensors.')
            else:
                if len(t) >= 0:
                   for dindx in range (len(t)):
                       if args.verbose:
                          print(idx, dindx, t[dindx].CurrentReading)
                       else:
                          if t[dindx].TemperatureWarning:
                             print(idx, dindx, 'Warning.  Temp:', t[dindx].CurrentReading)
                          elif t[dindx].TemperatureFailure:
                             print(idx, dindx, 'Critical.  Temp:', t[dindx].CurrentReading)
                          elif t[dindx].HealthState != 1:
                             print(idx, dindx, 'Sensor Failure.  RC:', t[dindx].HealthState.str())
                          elif t[dindx].PredictFailure:
                             print(idx, dindx, 'Predicted sensor failure.')

        except:
            break

        idx = idx + 1

if __name__ == '__main__':
   args = parse_options()

   APIConnect("https://"+args.controller, auth=(args.username, args.password))

   if args.disks or args.all:
      check_disks()

   if args.power or args.all:
      check_power_supplies()
   
   if args.temp or args.all:
      check_temperature()
   
   APIDisconnect()
